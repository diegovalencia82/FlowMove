import os
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from matplotlib.colors import Normalize
from matplotlib.cm import ScalarMappable
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.gridspec import GridSpec
from scipy.interpolate import griddata
from scipy.interpolate import RBFInterpolator
from mpl_toolkits.mplot3d.art3d import Poly3DCollection

##### =================== FUNCIONES=======================

def interpolar_puntos(puntos, num_puntos=100, metodo='cubic'):
    """
    Interpola los puntos de la matriz en una cuadrícula regular.

    Parámetros:
    - hendidura: numpy array con las coordenadas (X, Y, Z) de los puntos de la hendidura.
    - num_puntos: número de puntos en cada eje de la cuadrícula (opcional, por defecto 100).
    - metodo: método de interpolación (opcional, por defecto 'cubic').

    Retorna:
    - Xh_grid: cuadrícula de coordenadas X.
    - Yh_grid: cuadrícula de coordenadas Y.
    - Zh_grid: valores interpolados de Z en la cuadrícula.
    """
    # Crear una cuadrícula para interpolar los puntos
    xh_grid = np.linspace(np.min(puntos[:, 0]), np.max(puntos[:, 0]), num_puntos)
    yh_grid = np.linspace(np.min(puntos[:, 1]), np.max(puntos[:, 1]), num_puntos)
    Xh_grid, Yh_grid = np.meshgrid(xh_grid, yh_grid)

    # Interpolar los valores Z de la hendidura sobre la cuadrícula
    Zh_grid = griddata((puntos[:, 0], puntos[:, 1]), puntos[:, 2], (Xh_grid, Yh_grid), method=metodo)
    print(Zh_grid) 
    
    if np.isnan(Zh_grid).any():
        print("La interpolación contiene valores NaN.")
    
    return Xh_grid, Yh_grid, Zh_grid

def interpolar_puntos_3d(puntos, num_puntos=100, kernel='thin_plate_spline'):
    """
    Interpola los puntos tridimensionales en una cuadrícula 3D regular utilizando RBFInterpolator.

    Parámetros:
    - puntos: numpy array con las coordenadas (X, Y, Z) de los puntos.
    - num_puntos: número de puntos en cada eje de la cuadrícula (opcional, por defecto 100).
    - kernel: tipo de kernel para la interpolación radial (opcional, por defecto 'thin_plate_spline').

    Retorna:
    - Xh_grid: cuadrícula de coordenadas X.
    - Yh_grid: cuadrícula de coordenadas Y.
    - Zh_grid: cuadrícula de coordenadas Z.
    - Zh_interpolados: valores interpolados de Z en la cuadrícula tridimensional.
    """
    # Crear una cuadrícula 3D regular para la interpolación
    xh_grid = np.linspace(np.min(puntos[:, 0]), np.max(puntos[:, 0]), num_puntos)
    yh_grid = np.linspace(np.min(puntos[:, 1]), np.max(puntos[:, 1]), num_puntos)
    zh_grid = np.linspace(np.min(puntos[:, 2]), np.max(puntos[:, 2]), num_puntos)

    # Crear la malla tridimensional
    Xh_grid, Yh_grid, Zh_grid = np.meshgrid(xh_grid, yh_grid, zh_grid)
    
    # Crear el interpolador basado en funciones de base radial (RBF)
    rbf_interpolator = RBFInterpolator(puntos[:, :3], puntos[:, 2], kernel=kernel)
    
    # Interpolar los valores de Z en la cuadrícula tridimensional
    puntos_grid = np.vstack([Xh_grid.ravel(), Yh_grid.ravel(), Zh_grid.ravel()]).T
    Zh_interpolados = rbf_interpolator(puntos_grid).reshape(Xh_grid.shape)
    
    return Xh_grid, Yh_grid, Zh_grid, Zh_interpolados


# Definir las esquinas de la caja (cambia estas coordenadas según tus necesidades)
def crear_caja():
#    x_min, x_max = -2.1, 6.5
#    y_min, y_max = 0, 0.303
#    z_min, z_max = 0, 0.45
    
    # Crear las caras de la caja
    vertices = [
        # Cara inferior
        [(x_min, y_min, z_min), (x_max, y_min, z_min), (x_max, y_max, z_min), (x_min, y_max, z_min)],
        # Cara superior
        [(x_min, y_min, z_max), (x_max, y_min, z_max), (x_max, y_max, z_max), (x_min, y_max, z_max)],
        # Cara frontal
        [(x_min, y_min, z_min), (x_max, y_min, z_min), (x_max, y_min, z_max), (x_min, y_min, z_max)],
        # Cara trasera
        [(x_min, y_max, z_min), (x_max, y_max, z_min), (x_max, y_max, z_max), (x_min, y_max, z_max)],
        # Cara izquierda
        [(x_min, y_min, z_min), (x_min, y_max, z_min), (x_min, y_max, z_max), (x_min, y_min, z_max)],
        # Cara derecha
        [(x_max, y_min, z_min), (x_max, y_max, z_min), (x_max, y_max, z_max), (x_max, y_min, z_max)],
    ]
    return vertices

# Función para añadir la caja al gráfico 3D
def dibujar_caja(ax, vertices):
    # Añadir las caras al gráfico
    for cara in vertices:
        ax.add_collection3d(Poly3DCollection([cara], facecolors='cyan', edgecolors='black', alpha=0.2))


def read_snapshot(filepath):
    # Leer datos del archivo snapshot
    with open(filepath, 'r') as file:
        lines = file.readlines()
        # Extraer el tiempo del segundo dato de la primera línea que contiene metadatos
        time = float(lines[0].split()[1])
        # Saltar la primera línea que contiene metadatos
        lines = lines[1:]
        # Extraer las posiciones x, y, z, las velocidades vx, vy, vz y otros datos de cada partícula de cada línea
        data = np.array([[float(val) for val in line.split()] for line in lines])
    return time, data

def calculate_velocity(data):
    # Calcular la magnitud de la velocidad para cada partícula en 3D
    velocity = np.sqrt(data[:, 4]**2 + data[:, 5]**2 + data[:, 6]**2)  # Considerando las columnas 4, 5 y 6 como las velocidades vx, vy, vz
    return velocity

def update(frame):
    ax_3d.clear()
    ax_xz.clear()
    
    # Limites de la gráfica 3D
    ax_3d.set_xlim(x_min, x_max)
    ax_3d.set_ylim(y_min, y_max)
    ax_3d.set_zlim(z_min, z_max)

    # Establecer los nombres de los ejes para la gráfica 3D
    ax_3d.set_xlabel('X')
    ax_3d.set_ylabel('Y')
    ax_3d.set_zlabel('Z')
    
    # Ajustar escalas de los ejes
x_range = x_max - x_min
y_range = y_max - y_min
z_range = z_max - z_min
max_range = max(x_range, y_range, z_range)

ax_3d.set_xlim(x_min, x_min + max_range)
ax_3d.set_ylim(y_min, y_min + max_range)
ax_3d.set_zlim(z_min, z_min + max_range)

# Mantener proporciones reales
ax_3d.set_box_aspect([x_range, y_range, z_range])

    # Limites de la gráfica 2D (x-z)
    ax_xz.set_xlim(x_min, x_max)
    ax_xz.set_ylim(z_min, z_max)

    # Establecer los nombres de los ejes para la gráfica 2D (x-z)
    ax_xz.set_xlabel('X')
    ax_xz.set_ylabel('Z')
    
    # Igualar las escalas de los ejes en 2D
    ax_xz.set_aspect('equal', 'box')
    
    # Añadir la caja
    vertices_caja = crear_caja()
    dibujar_caja(ax_3d, vertices_caja)
    
    # Filtrar partículas si sel es 0
    if sel == 0:
        data = frame[1][frame[1][:, 11] != -1]
    else:
        data = frame[1]
        
    # Dividir las partículas en montaña (itype = -1) y fluido (itype = 1)
    fluid_particles = data[data[:, 11] == 1]  # Partículas de fluido (itype = 1)
    mountain_particles1 = data[data[:, 11] == -1]  # Partículas de montaña (itype = -1)
    mountain_particles = mountain_particles1[::5]  # Escoje cada n puntos
    
    # Calcular la velocidad de las partículas en el frame actual
    velocity = calculate_velocity(fluid_particles)
    
    # Crear una escala de colores que vaya de azul a rojo
    norm = Normalize(vmin=0, vmax=2*np.sqrt(2*9.8*ht))
    cmap = plt.get_cmap('coolwarm')
    sm = ScalarMappable(norm=norm, cmap=cmap)
    
    # Obtener el color de cada partícula según su velocidad
    colors = sm.to_rgba(velocity)
    
    # Dibujar las partículas en el frame actual con el color correspondiente en la gráfica 3D
#    ax_3d.scatter(fluid_particles[:, 1], fluid_particles[:, 2], fluid_particles[:, 3], color=colors, s=tamanop, alpha=1)
    ax_3d.scatter(fluid_particles[:, 1], fluid_particles[:, 2], fluid_particles[:, 3], color='blue', s=tamanop, alpha=1)
#    ax_3d.plot_trisurf(fluid_particles[:, 1], fluid_particles[:, 2], fluid_particles[:, 3], cmap='viridis', edgecolor='none')
#    Xh_grid, Yh_grid, Zh_grid, Zh_interpolados = interpolar_puntos_3d(fluid_particles)   
#    ax_3d.plot_surface(Xh_grid[:, :, 1], Yh_grid[:, :, 1], Zh_interpolados[:, :, 1], cmap='viridis')

    
    # Dibujar las partículas en el frame actual con el color correspondiente en la gráfica 2D (x-z)
    if sel == 1:
        ax_xz.scatter(mountain_particles[:, 1], mountain_particles[:, 3], color='green', s=0.1, alpha=0.1)
    
    ax_xz.scatter(fluid_particles[:, 1], fluid_particles[:, 3], color=colors, s=tamanop, alpha=0.8)

    if sel == 1:
        # Seleccionar las partículas con itype = -1 y pintarlas de color gris en ambas gráficas
#        gray_particles = frame[1][frame[1][:, 11] == -1]
#        ax_3d.scatter(gray_particles[:, 1], gray_particles[:, 2], gray_particles[:, 3], color='gray', s=10, alpha=0.01)
#        ax_xz.scatter(gray_particles[:, 1], gray_particles[:, 3], color='gray', s=10, alpha=0.01)
#        ax_3d.scatter(mountain_particles[:, 1], mountain_particles[:, 2], mountain_particles[:, 3], color='green', s=0.5, alpha=0.1)
        
        Xh_grid, Yh_grid, Zh_grid = interpolar_puntos(mountain_particles[:, 1:4], num_puntos=100, metodo='cubic')
#        Xh_grid, Yh_grid, Zh_grid = interpolar_puntos(mountain_particles, num_puntos=100, metodo='cubic')
#        Zh_grid = np.nan_to_num(Zh_grid, nan=np.nanmin(Zh_grid))  # Reemplaza los NaN con el valor mínimo de Zh_grid	
        #ax_3d.contour(Xh_grid, Yh_grid, Zh_grid, levels=10, cmap='Greens', linewidths=1.5, alpha=0.7)
        #contours = ax_3d.contour3D(Xh_grid, Yh_grid, Zh_grid, levels=10, cmap='Greens', linewidths=1.5, alpha=0.7)
#        ax_3d.contour3D(Xh_grid, Yh_grid, Zh_grid, levels=10, cmap='Greens', linewidths=1.5, alpha=0.7)
#        ax_3d.plot_surface(Xh_grid, Yh_grid, Zh_grid, color='green', alpha=0.6, edgecolor='none', label='Superficie Montaña')
#        ax_3d.plot_trisurf(mountain_particles[:, 0], mountain_particles[:, 1], mountain_particles[:, 2], color='green', alpha=0.9, label='Superficie Lodo')

#       Graficar la superficie 3D con 'plot_surface' para mostrar la topografía completa
        ax_3d.plot_surface(Xh_grid, Yh_grid, Zh_grid, cmap='Greens', alpha=0.7, edgecolor='none')
#       Añadir una cuadrícula con 'plot_wireframe' para mostrar las líneas perpendiculares en los niveles
        #ax_3d.plot_wireframe(Xh_grid, Yh_grid, Zh_grid, color='green', linewidth=0.5, alpha=0.8)
    
    # Mostrar el tiempo en la gráfica 3D
    ax_3d.text2D(0.05, 0.95, f't = {frame[0]:.2f}', transform=ax_3d.transAxes, ha='left', va='top', fontsize=12)


### =================== FIN DE FUNCIONES


# Variable de selección para mostrar o no las partículas con itype = -1
sel = 0  # 1 para mostrar las partículas con itype = -1, 0 para no mostrarlas
tamanop = 1
ht = 0.3
x_min, x_max = 0., 1.61
y_min, y_max = 0, 0.15
z_min, z_max = 0, 0.6

# Definir la carpeta donde se encuentran los archivos
folder = './'

# Crear una figura con GridSpec para organizar las subtramas
fig = plt.figure(figsize=(12, 6))
gs = GridSpec(1, 2, width_ratios=[2, 1])

# Crear una subtrama para la animación en 3D
ax_3d = fig.add_subplot(gs[0], projection='3d')

# Crear una subtrama para la vista 2D (x-z)
ax_xz = fig.add_subplot(gs[1])

# Lista para almacenar los datos de todas las instantáneas
data_frames = []

# Iterar sobre los nombres de archivo del tipo 'snapshot_0001', 'snapshot_0002', ..., 'snapshot_2000'
for i in range(0,240):
    # Formatear el nombre de archivo con el número de snapshot
    filename = f'snapshot_{i:04d}'
    # Crear la ruta completa al archivo
    filepath = os.path.join(folder, filename)
    # Verificar si el archivo existe
    if os.path.exists(filepath):
        # Leer datos del archivo snapshot y almacenarlos en la lista
        print('Loading = ', filename)
        time, data = read_snapshot(filepath)
        data_frames.append((time, data))
    else:
        print(f'El archivo {filename} no existe en la carpeta especificada.')

# Crear la animación
anim = FuncAnimation(fig, update, frames=data_frames, interval=25)  # Intervalo de 50 milisegundos entre cada frame

# Añadir la barra de colores en la parte superior izquierda
cbar_ax = fig.add_axes([0.15, 0.92, 0.7, 0.02])  # [left, bottom, width, height]
norm = Normalize(vmin=0, vmax=np.sqrt(2*9.8*ht))
#norm = Normalize(vmin=0, vmax=0.5)
cmap = plt.get_cmap('coolwarm')
sm = ScalarMappable(norm=norm, cmap=cmap)
cbar = plt.colorbar(sm, cax=cbar_ax, orientation='horizontal')
cbar_ax.text(1.0, 1.3, 'Velocity magnitude', transform=cbar_ax.transAxes, ha='right', va='bottom', fontsize=12)

# Guardar la animación como un archivo .mp4
anim.save('animacion_3D.mp4', writer='ffmpeg')

plt.tight_layout(rect=[0, 0, 1, 0.9])  # Ajustar el layout para dejar espacio a la barra de colores
plt.show()

